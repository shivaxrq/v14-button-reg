const { ButtonBuilder, ActionRowBuilder, ButtonStyle, MessageEmbed, EmbedBuilder } = require('discord.js');
const config = require('../../../config.json');

exports.run = async (client, message, args) => {
    // KayÄ±t butonu oluÅŸturma
    const registerButton = new ButtonBuilder()
        .setCustomId('register')
        .setLabel('KayÄ±t Ol')
        .setEmoji('<:1177358700013441034:1180533501813080094>')
        .setStyle(ButtonStyle.Danger);

    // KayÄ±t bilgi mesajÄ± oluÅŸturma
    const registerEmbed = new EmbedBuilder()
    .setTitle('KayÄ±t Sistemi ğŸ‘¤')
    .setDescription(`KayÄ±t isteÄŸi gÃ¶ndermek iÃ§in aÅŸaÄŸÄ±daki **KayÄ±t Ol** butonuna tÄ±klayarak gÃ¶ndere bilirsiniz.`)

    // MesajÄ± gÃ¶nderme
    const registerMessage = await message.channel.send({ embeds: [registerEmbed], components: [new ActionRowBuilder().addComponents(registerButton)] });

    // Buton tÄ±klama olaylarÄ±nÄ± dinleme
    const filter = interaction => interaction.user.id === message.author.id;
    const collector = registerMessage.createMessageComponentCollector({ filter, time: 60000 });

    collector.on('collect', async interaction => {
        // KayÄ±t butonuna tÄ±klanÄ±rsa
        if (interaction.customId === 'register') {
            // KayÄ±t log kanalÄ±na mesaj gÃ¶nderme
            const registerLogChannel = message.guild.channels.cache.get(config.kayÄ±tLogKanalÄ±ID);
            if (!registerLogChannel) {
                console.error('KayÄ±t log kanalÄ± bulunamadÄ±.');
                return;
            }

            const registerLogEmbed = new EmbedBuilder()
                .setTitle('KayÄ±t Ä°steÄŸi')
                .setDescription(`${message.author} kullanÄ±cÄ±sÄ± kayÄ±t olmak istiyor. OnaylÄ±yor musunuz?`)
                .setTimestamp();

            const registerLogMessage = await registerLogChannel.send({ embeds: [registerLogEmbed], components: [
                new ActionRowBuilder().addComponents(
                    new ButtonBuilder().setCustomId('approve').setLabel('Onayla').setEmoji('<:emote_true:1187707955072733184>').setStyle(ButtonStyle.Success),
                    new ButtonBuilder().setCustomId('reject').setLabel('Reddet').setEmoji('<:emote_false:1187707956930809917>').setStyle(ButtonStyle.Danger)
                )
            ] });

            // Buton tÄ±klama olaylarÄ±nÄ± dinleme
            const registerFilter = i => i.user.id === message.author.id && (i.customId === 'approve' || i.customId === 'reject');
            const registerCollector = registerLogMessage.createMessageComponentCollector({ filter: registerFilter, time: 60000 });

            registerCollector.on('collect', async i => {
                if (i.customId === 'approve') {
                    // KullanÄ±cÄ±ya kayÄ±t rolÃ¼ verme
                    const guild = interaction.guild;
                    const roleID = config.kayÄ±tRolÃ¼ID;
                    const member = guild.members.cache.get(message.author.id);
                    const role = guild.roles.cache.get(roleID);

                    if (!role) {
                        console.error('KayÄ±t rolÃ¼ bulunamadÄ±.');
                        return;
                    }

                    try {
                        await member.roles.add(role);
                        i.reply({ content: 'KaydÄ±nÄ±z baÅŸarÄ±yla tamamlandÄ±!', ephemeral: true });
                        registerMessage.delete();
                    } catch (error) {
                        console.error('Rol verme iÅŸlemi baÅŸarÄ±sÄ±z oldu:', error);
                        i.reply({ content: 'KayÄ±t iÅŸlemi sÄ±rasÄ±nda bir hata oluÅŸtu.', ephemeral: true });
                    }
                } else if (i.customId === 'reject') {
                    i.reply({ content: 'KayÄ±t talebi reddedildi.', ephemeral: true });
                    registerMessage.delete();
                }
            });

            // KayÄ±t olma isteÄŸi gÃ¶nderildi bildirimi
            interaction.reply({ content: 'KayÄ±t olma isteÄŸiniz baÅŸarÄ±lÄ± bir ÅŸekilde log kanalÄ±na gÃ¶nderildi.', ephemeral: true });
        }
    });
};

exports.conf = {
    aliases: [],
    guildOnly: true,
};

exports.help = {
    name: 'kayÄ±t',
    description: 'KayÄ±t olmak iÃ§in kullanÄ±lÄ±r.',
    usage: 'kayÄ±t',
};
